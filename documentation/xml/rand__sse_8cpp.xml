<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="rand__sse_8cpp" kind="file" language="C++">
    <compoundname>rand_sse.cpp</compoundname>
    <includes local="yes">emmintrin.h</includes>
    <includes refid="rand__sse_8h" local="yes">rand_sse.h</includes>
    <incdepgraph>
      <node id="117">
        <label>rand_sse.h</label>
        <link refid="rand__sse_8h"/>
      </node>
      <node id="116">
        <label>emmintrin.h</label>
      </node>
      <node id="115">
        <label>rand_sse.cpp</label>
        <link refid="rand__sse_8cpp"/>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" prot="public" static="no">
        <name>_ALIGN</name>
        <param><defname>N</defname></param>
        <initializer>__declspec(align(N))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/server/src/rand_sse.cpp" line="44" column="10" bodyfile="src/server/src/rand_sse.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__rand__ssecpp_1ga8217292e4775144512e0e4dbc637c970" prot="public" static="yes" mutable="no">
        <type>__m128i</type>
        <definition>__m128i cur_seed</definition>
        <argsstring></argsstring>
        <name>cur_seed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/server/src/rand_sse.cpp" line="48" column="1" bodyfile="src/server/src/rand_sse.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__rand__ssecpp_1ga80db1a2aa7de7edf52b9c60e101d556f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srand_sse</definition>
        <argsstring>(unsigned int seed)</argsstring>
        <name>srand_sse</name>
        <param>
          <type>unsigned int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Задать seed. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">srand_sse(time(NULL));</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/server/src/rand_sse.cpp" line="57" column="1" bodyfile="src/server/src/rand_sse.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__rand__ssecpp_1gab7ae3ab6c8fb3e31548413dd0154db7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rand_sse</definition>
        <argsstring>(unsigned int *result)</argsstring>
        <name>rand_sse</name>
        <param>
          <type>unsigned int *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Получение вектора с случайными числами </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">unsigned<sp/>int<sp/>u_i_random[4];</highlight></codeline>
<codeline><highlight class="normal">rand_sse(u_i_random);</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>вектор с случайными числами </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/server/src/rand_sse.cpp" line="70" column="1" bodyfile="src/server/src/rand_sse.cpp" bodystart="70" bodyend="119"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Генерация рандомных чисел через SSE. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Kipp Owens, Rajiv Parikh, SavaLione </para>
</simplesect>
<simplesect kind="date"><para>13 Apr 2019 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>The<sp/>Software<sp/>is<sp/>provided<sp/>&quot;AS<sp/>IS&quot;<sp/>and<sp/>possibly<sp/>with<sp/>faults.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Intel<sp/>disclaims<sp/>any<sp/>and<sp/>all<sp/>warranties<sp/>and<sp/>guarantees,<sp/>express,<sp/>implied<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise,<sp/>arising,<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>software<sp/>delivered<sp/>hereunder,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>including<sp/>but<sp/>not<sp/>limited<sp/>to<sp/>the<sp/>warranty<sp/>of<sp/>merchantability,<sp/>the<sp/>warranty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>fitness<sp/>for<sp/>a<sp/>particular<sp/>purpose,<sp/>and<sp/>any<sp/>warranty<sp/>of<sp/>non-infringement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>intellectual<sp/>property<sp/>rights<sp/>of<sp/>any<sp/>third<sp/>party.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Intel<sp/>neither<sp/>assumes<sp/>nor<sp/>authorizes<sp/>any<sp/>person<sp/>to<sp/>assume<sp/>for<sp/>it<sp/>any<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>liability.<sp/>Customer<sp/>will<sp/>use<sp/>the<sp/>software<sp/>at<sp/>its<sp/>own<sp/>risk.<sp/>Intel<sp/>will<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>liable<sp/>to<sp/>customer<sp/>for<sp/>any<sp/>direct<sp/>or<sp/>indirect<sp/>damages<sp/>incurred<sp/>in<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>software.<sp/>In<sp/>no<sp/>event<sp/>will<sp/>Intel<sp/>be<sp/>liable<sp/>for<sp/>loss<sp/>of<sp/>profits,<sp/>loss<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use,<sp/>loss<sp/>of<sp/>data,<sp/>business<sp/>interruption,<sp/>nor<sp/>for<sp/>punitive,<sp/>incidental,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>consequential,<sp/>or<sp/>special<sp/>damages<sp/>of<sp/>any<sp/>kind,<sp/>even<sp/>if<sp/>advised<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>possibility<sp/>of<sp/>such<sp/>damages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2003<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Third-party<sp/>brands<sp/>and<sp/>names<sp/>are<sp/>the<sp/>property<sp/>of<sp/>their<sp/>respective<sp/>owners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight><highlight class="comment">//<sp/>Random<sp/>Number<sp/>Generation<sp/>for<sp/>SSE<sp/>/<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Source<sp/>File</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Version<sp/>0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author<sp/>Kipp<sp/>Owens,<sp/>Rajiv<sp/>Parikh</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor">#include<sp/>&quot;emmintrin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rand__sse_8h" kindref="compound">rand_sse.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_ALIGN(N)<sp/>__attribute__((aligned(N)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_ALIGN(N)<sp/>__declspec(align(N))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">static<sp/>__m128i<sp/>cur_seed;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="group__rand__sseh_1ga80db1a2aa7de7edf52b9c60e101d556f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__rand__ssecpp_1ga80db1a2aa7de7edf52b9c60e101d556f" kindref="member">srand_sse</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_seed<sp/>=<sp/>_mm_set_epi32(seed,<sp/>seed<sp/>+<sp/>1,<sp/>seed,<sp/>seed<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__rand__sseh_1gab7ae3ab6c8fb3e31548413dd0154db7d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__rand__ssecpp_1gab7ae3ab6c8fb3e31548413dd0154db7d" kindref="member">rand_sse</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*result)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128i<sp/>cur_seed_split;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128i<sp/>multiplier;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128i<sp/>adder;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128i<sp/>mod_mask;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128i<sp/>sra_mask;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128i<sp/>sseresult;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mult[4]<sp/>=<sp/>{214013,<sp/>17405,<sp/>214013,<sp/>69069};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gadd[4]<sp/>=<sp/>{2531011,<sp/>10395331,<sp/>13737667,<sp/>1};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask[4]<sp/>=<sp/>{0xFFFFFFFF,<sp/>0,<sp/>0xFFFFFFFF,<sp/>0};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rand__ssecpp_1gae2c66d1d7db5adf0c1853960e2be1119" kindref="member">_ALIGN</ref>(16)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>masklo[4]<sp/>=<sp/>{0x00007FFF,<sp/>0x00007FFF,<sp/>0x00007FFF,<sp/>0x00007FFF};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>adder<sp/>=<sp/>_mm_load_si128((__m128i<sp/>*)gadd);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>multiplier<sp/>=<sp/>_mm_load_si128((__m128i<sp/>*)mult);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>mod_mask<sp/>=<sp/>_mm_load_si128((__m128i<sp/>*)mask);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>sra_mask<sp/>=<sp/>_mm_load_si128((__m128i<sp/>*)masklo);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_seed_split<sp/>=<sp/>_mm_shuffle_epi32(cur_seed,<sp/>_MM_SHUFFLE(2,<sp/>3,<sp/>0,<sp/>1));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_seed<sp/>=<sp/>_mm_mul_epu32(cur_seed,<sp/>multiplier);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>multiplier<sp/>=<sp/>_mm_shuffle_epi32(multiplier,<sp/>_MM_SHUFFLE(2,<sp/>3,<sp/>0,<sp/>1));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_seed_split<sp/>=<sp/>_mm_mul_epu32(cur_seed_split,<sp/>multiplier);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_seed<sp/>=<sp/>_mm_and_si128(cur_seed,<sp/>mod_mask);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_seed_split<sp/>=<sp/>_mm_and_si128(cur_seed_split,<sp/>mod_mask);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_seed_split<sp/>=<sp/>_mm_shuffle_epi32(cur_seed_split,<sp/>_MM_SHUFFLE(2,<sp/>3,<sp/>0,<sp/>1));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_seed<sp/>=<sp/>_mm_or_si128(cur_seed,<sp/>cur_seed_split);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_seed<sp/>=<sp/>_mm_add_epi32(cur_seed,<sp/>adder);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>COMPATABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>lines<sp/>below<sp/>if<sp/>you<sp/>wish<sp/>to<sp/>reduce<sp/>your<sp/>results<sp/>to<sp/>16-bit<sp/>vals...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>sseresult<sp/>=<sp/>_mm_srai_epi32(cur_seed,<sp/>16);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>sseresult<sp/>=<sp/>_mm_and_si128(sseresult,<sp/>sra_mask);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_storeu_si128((__m128i<sp/>*)result,<sp/>sseresult);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_storeu_si128((__m128i<sp/>*)result,<sp/>cur_seed);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/server/src/rand_sse.cpp"/>
  </compounddef>
</doxygen>
