<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="server_2src_2regex_8cpp" kind="file" language="C++">
    <compoundname>server/src/regex.cpp</compoundname>
    <includes refid="_regex_8h" local="yes">Regex.h</includes>
    <includes local="no">string</includes>
    <includes local="no">boost/regex.hpp</includes>
    <includes refid="_battleship_royale_8h" local="yes">BattleshipRoyale.h</includes>
    <incdepgraph>
      <node id="130">
        <label>Regex.h</label>
        <link refid="_regex_8h"/>
        <childnode refid="131" relation="include">
        </childnode>
      </node>
      <node id="129">
        <label>Regex.cpp</label>
        <link refid="server_2src_2regex_8cpp"/>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>string</label>
      </node>
      <node id="133">
        <label>BattleshipRoyale.h</label>
        <link refid="_battleship_royale_8h"/>
      </node>
      <node id="132">
        <label>boost/regex.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="server_2src_2regex_8cpp_1ac4882c93b963bd53fd60978a9661fa30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool check_pattern</definition>
        <argsstring>(std::string *msg, std::string *pattern)</argsstring>
        <name>check_pattern</name>
        <param>
          <type>std::string *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
<para>Проверка соответствия строки паттерну </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">string<sp/>s<sp/>=<sp/>&quot;user:[SavaLione]&quot;;</highlight></codeline>
<codeline><highlight class="normal">string<sp/>s_pattern<sp/>=<sp/>BR::REG_USER;</highlight></codeline>
<codeline><highlight class="normal">if(check_pattern(&amp;s,<sp/>&amp;s_pattern))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//some</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Строка </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Паттерн </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - соответствует, false - не соответствует. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/server/src/Regex.cpp" line="9" column="1" bodyfile="src/server/src/Regex.cpp" bodystart="9" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="server_2src_2regex_8cpp_1a524588640ff7393a801141740202d9dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getData</definition>
        <argsstring>(std::string *msg, std::string *pattern, std::string *ret_one)</argsstring>
        <name>getData</name>
        <param>
          <type>std::string *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>ret_one</declname>
        </param>
        <briefdescription>
<para>Получение информации из строки </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">string<sp/>s<sp/>=<sp/>&quot;user:[SavaLione]&quot;;</highlight></codeline>
<codeline><highlight class="normal">string<sp/>s_pattern<sp/>=<sp/>BR::REG_USER;</highlight></codeline>
<codeline><highlight class="normal">string<sp/>s_ret_one<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal">getData(&amp;s,<sp/>&amp;s_pattern,<sp/>&amp;s_ret_one);</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Строка </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Паттерн </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ret_one</parametername>
</parameternamelist>
<parameterdescription>
<para>Информация с первого нахождения в строке </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/server/src/Regex.cpp" line="16" column="1" bodyfile="src/server/src/Regex.cpp" bodystart="16" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="server_2src_2regex_8cpp_1a0ac985b5fff36005eb80cda832582ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getData</definition>
        <argsstring>(std::string *msg, std::string *pattern, std::string *ret_one, std::string *ret_two)</argsstring>
        <name>getData</name>
        <param>
          <type>std::string *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>ret_one</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>ret_two</declname>
        </param>
        <briefdescription>
<para>Получение информации из строки </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">string<sp/>s<sp/>=<sp/>&quot;user:[SavaLione]&quot;;</highlight></codeline>
<codeline><highlight class="normal">string<sp/>s_pattern<sp/>=<sp/>BR::REG_USER;</highlight></codeline>
<codeline><highlight class="normal">string<sp/>s_ret_one<sp/>=<sp/>&quot;&quot;,<sp/>s_ret_two<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal">getData(&amp;s,<sp/>&amp;s_pattern,<sp/>&amp;s_ret_one,<sp/>&amp;s_ret_two);</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Строка </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Паттерн </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ret_one</parametername>
</parameternamelist>
<parameterdescription>
<para>Информация с первого нахождения в строке </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ret_two</parametername>
</parameternamelist>
<parameterdescription>
<para>Информация с второго нахождения в строке </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/server/src/Regex.cpp" line="27" column="1" bodyfile="src/server/src/Regex.cpp" bodystart="27" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_regex_8h" kindref="compound">Regex.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/regex.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_battleship_royale_8h" kindref="compound">BattleshipRoyale.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="_regex_8h_1ac4882c93b963bd53fd60978a9661fa30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="server_2src_2regex_8cpp_1ac4882c93b963bd53fd60978a9661fa30" kindref="member">check_pattern</ref>(std::string<sp/>*msg,<sp/>std::string<sp/>*pattern)</highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::regex<sp/>pat(*pattern);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::smatch<sp/>result;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::regex_search(*msg,<sp/>result,<sp/>pat);</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="_regex_8h_1a524588640ff7393a801141740202d9dc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="server_2src_2regex_8cpp_1a524588640ff7393a801141740202d9dc" kindref="member">getData</ref>(std::string<sp/>*msg,<sp/>std::string<sp/>*pattern,<sp/>std::string<sp/>*ret_one)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::regex<sp/>pat(*pattern);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::smatch<sp/>result;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::regex_search(*msg,<sp/>result,<sp/>pat))</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>submatch_one(result[1].first,<sp/>result[1].second);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ret_one<sp/>=<sp/>submatch_one;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="_regex_8h_1a0ac985b5fff36005eb80cda832582ca9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="server_2src_2regex_8cpp_1a524588640ff7393a801141740202d9dc" kindref="member">getData</ref>(std::string<sp/>*msg,<sp/>std::string<sp/>*pattern,<sp/>std::string<sp/>*ret_one,<sp/>std::string<sp/>*ret_two)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::regex<sp/>pat(*pattern);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::smatch<sp/>result;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::regex_search(*msg,<sp/>result,<sp/>pat))</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>submatch_one(result[1].first,<sp/>result[1].second);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>submatch_two(result[2].first,<sp/>result[2].second);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ret_one<sp/>=<sp/>submatch_one;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ret_two<sp/>=<sp/>submatch_two;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/server/src/Regex.cpp"/>
  </compounddef>
</doxygen>
